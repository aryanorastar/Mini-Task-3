use std::io;
use printpdf::*;
use std::fs::File;
use std::io::BufWriter;

fn main() {
    println!("Student Report Card Generator");
    println!("----------------------------");
    
    // Get student information
    let name = get_input("Enter student name: ");
    let total_marks: f64 = get_number_input::<f64>("Enter total marks: ");
    let num_subjects: u32 = get_number_input::<u32>("Enter number of subjects: ");
    
    // Calculate average and grade
    let average = total_marks / num_subjects as f64;
    let grade = calculate_grade(average);
    
    // Display report card
    println!("===== Report Card =====");
    println!("Name: {}", name);
    println!("Total Marks: {}", total_marks);
    println!("Subjects: {}", num_subjects);
    println!("Average: {:.2}", average);
    println!("Grade: {}", grade);
    
    // Generate PDF
    match generate_pdf(&name, total_marks, num_subjects, average, &grade) {
        Ok(_) => println!("PDF report card generated successfully as 'report_card.pdf'"),
        Err(e) => println!("Could not generate PDF: {}", e),
    }
}

fn get_input(prompt: &str) -> String {
    print!("{}", prompt);
    io::Write::flush(&mut io::stdout()).unwrap();
    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    input.trim().to_string()
}

fn get_number_input<T: std::str::FromStr>(prompt: &str) -> T
where
    T::Err: std::fmt::Debug,
{
    loop {
        let input = get_input(prompt);
        match input.parse::<T>() {
            Ok(num) => return num,
            Err(_) => println!("Please enter a valid number."),
        }
    }
}

fn calculate_grade(average: f64) -> &'static str {
    if average >= 90.0 {
        "A"
    } else if average >= 75.0 {
        "B"
    } else if average >= 60.0 {
        "C"
    } else {
        "D"
    }
}

fn generate_pdf(name: &str, total_marks: f64, subjects: u32, average: f64, grade: &str) -> Result<(), Box<dyn std::error::Error>> {
    // Create a new PDF document
    let (doc, page1, layer1) = PdfDocument::new("Report Card", Mm(210.0), Mm(297.0), "Layer 1");
    let current_layer = doc.get_page(page1).get_layer(layer1);
    
    // Use built-in fonts instead of system fonts
    let font = doc.add_builtin_font(BuiltinFont::Helvetica)?;
    let bold_font = doc.add_builtin_font(BuiltinFont::HelveticaBold)?;
    
    // Set up text styling
    let font_size = 12.0;
    let title_font_size = 18.0;
    
    // Title
    current_layer.use_text("STUDENT REPORT CARD", title_font_size,
        Mm(50.0), Mm(250.0), &bold_font);
    
    // Student information
    current_layer.use_text(&format!("Name: {}", name), font_size,
        Mm(30.0), Mm(220.0), &font);
    
    current_layer.use_text(&format!("Total Marks: {}", total_marks), font_size,
        Mm(30.0), Mm(200.0), &font);
    
    current_layer.use_text(&format!("Number of Subjects: {}", subjects), font_size,
        Mm(30.0), Mm(180.0), &font);
    
    current_layer.use_text(&format!("Average: {:.2}", average), font_size,
        Mm(30.0), Mm(160.0), &font);
    
    current_layer.use_text(&format!("Grade: {}", grade), font_size,
        Mm(30.0), Mm(140.0), &bold_font);
    
    // Add a footer
    current_layer.use_text("Generated by Student Grade Calculator", 8.0,
        Mm(30.0), Mm(30.0), &font);
    
    // Save the PDF
    doc.save(&mut BufWriter::new(File::create("report_card.pdf")?))?;
    
    Ok(())
} 